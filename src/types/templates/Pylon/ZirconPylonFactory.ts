// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class PylonCreated extends EthereumEvent {
  get params(): PylonCreated__Params {
    return new PylonCreated__Params(this);
  }
}

export class PylonCreated__Params {
  _event: PylonCreated;

  constructor(event: PylonCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolToken0(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get poolToken1(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get pylon(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get pair(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ZirconPylonFactory extends SmartContract {
  static bind(address: Address): ZirconPylonFactory {
    return new ZirconPylonFactory("ZirconPylonFactory", address);
  }

  EMASamples(): BigInt {
    let result = super.call("EMASamples", []);

    return result[0].toBigInt();
  }

  try_EMASamples(): CallResult<BigInt> {
    let result = super.tryCall("EMASamples", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  addPylon(_pairAddress: Address, _tokenA: Address, _tokenB: Address): Address {
    let result = super.call("addPylon", [
      EthereumValue.fromAddress(_pairAddress),
      EthereumValue.fromAddress(_tokenA),
      EthereumValue.fromAddress(_tokenB)
    ]);

    return result[0].toAddress();
  }

  try_addPylon(
    _pairAddress: Address,
    _tokenA: Address,
    _tokenB: Address
  ): CallResult<Address> {
    let result = super.tryCall("addPylon", [
      EthereumValue.fromAddress(_pairAddress),
      EthereumValue.fromAddress(_tokenA),
      EthereumValue.fromAddress(_tokenB)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  addPylonCustomPT(
    _pairAddress: Address,
    _tokenA: Address,
    _tokenB: Address,
    floatPTAddress: Address,
    anchorPTAddress: Address
  ): Address {
    let result = super.call("addPylonCustomPT", [
      EthereumValue.fromAddress(_pairAddress),
      EthereumValue.fromAddress(_tokenA),
      EthereumValue.fromAddress(_tokenB),
      EthereumValue.fromAddress(floatPTAddress),
      EthereumValue.fromAddress(anchorPTAddress)
    ]);

    return result[0].toAddress();
  }

  try_addPylonCustomPT(
    _pairAddress: Address,
    _tokenA: Address,
    _tokenB: Address,
    floatPTAddress: Address,
    anchorPTAddress: Address
  ): CallResult<Address> {
    let result = super.tryCall("addPylonCustomPT", [
      EthereumValue.fromAddress(_pairAddress),
      EthereumValue.fromAddress(_tokenA),
      EthereumValue.fromAddress(_tokenB),
      EthereumValue.fromAddress(floatPTAddress),
      EthereumValue.fromAddress(anchorPTAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  allPylons(param0: BigInt): Address {
    let result = super.call("allPylons", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allPylons(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("allPylons", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  allPylonsLength(): BigInt {
    let result = super.call("allPylonsLength", []);

    return result[0].toBigInt();
  }

  try_allPylonsLength(): CallResult<BigInt> {
    let result = super.tryCall("allPylonsLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  changeEnergyAddress(
    _newEnergyRev: Address,
    _pylonAddress: Address,
    _pairAddress: Address,
    _tokenA: Address,
    _tokenB: Address
  ): Address {
    let result = super.call("changeEnergyAddress", [
      EthereumValue.fromAddress(_newEnergyRev),
      EthereumValue.fromAddress(_pylonAddress),
      EthereumValue.fromAddress(_pairAddress),
      EthereumValue.fromAddress(_tokenA),
      EthereumValue.fromAddress(_tokenB)
    ]);

    return result[0].toAddress();
  }

  try_changeEnergyAddress(
    _newEnergyRev: Address,
    _pylonAddress: Address,
    _pairAddress: Address,
    _tokenA: Address,
    _tokenB: Address
  ): CallResult<Address> {
    let result = super.tryCall("changeEnergyAddress", [
      EthereumValue.fromAddress(_newEnergyRev),
      EthereumValue.fromAddress(_pylonAddress),
      EthereumValue.fromAddress(_pairAddress),
      EthereumValue.fromAddress(_tokenA),
      EthereumValue.fromAddress(_tokenB)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  deltaGammaMinFee(): BigInt {
    let result = super.call("deltaGammaMinFee", []);

    return result[0].toBigInt();
  }

  try_deltaGammaMinFee(): CallResult<BigInt> {
    let result = super.tryCall("deltaGammaMinFee", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  deltaGammaThreshold(): BigInt {
    let result = super.call("deltaGammaThreshold", []);

    return result[0].toBigInt();
  }

  try_deltaGammaThreshold(): CallResult<BigInt> {
    let result = super.tryCall("deltaGammaThreshold", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  energyFactory(): Address {
    let result = super.call("energyFactory", []);

    return result[0].toAddress();
  }

  try_energyFactory(): CallResult<Address> {
    let result = super.tryCall("energyFactory", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", []);

    return result[0].toAddress();
  }

  try_factory(): CallResult<Address> {
    let result = super.tryCall("factory", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getPylon(param0: Address, param1: Address): Address {
    let result = super.call("getPylon", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toAddress();
  }

  try_getPylon(param0: Address, param1: Address): CallResult<Address> {
    let result = super.tryCall("getPylon", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  maximumPercentageSync(): BigInt {
    let result = super.call("maximumPercentageSync", []);

    return result[0].toBigInt();
  }

  try_maximumPercentageSync(): CallResult<BigInt> {
    let result = super.tryCall("maximumPercentageSync", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  muChangeFactor(): BigInt {
    let result = super.call("muChangeFactor", []);

    return result[0].toBigInt();
  }

  try_muChangeFactor(): CallResult<BigInt> {
    let result = super.tryCall("muChangeFactor", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  muUpdatePeriod(): BigInt {
    let result = super.call("muUpdatePeriod", []);

    return result[0].toBigInt();
  }

  try_muUpdatePeriod(): CallResult<BigInt> {
    let result = super.tryCall("muUpdatePeriod", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", []);

    return result[0].toBoolean();
  }

  try_paused(): CallResult<boolean> {
    let result = super.tryCall("paused", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _energyFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ptFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _feeToSetter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _migrator(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPylonCall extends EthereumCall {
  get inputs(): AddPylonCall__Inputs {
    return new AddPylonCall__Inputs(this);
  }

  get outputs(): AddPylonCall__Outputs {
    return new AddPylonCall__Outputs(this);
  }
}

export class AddPylonCall__Inputs {
  _call: AddPylonCall;

  constructor(call: AddPylonCall) {
    this._call = call;
  }

  get _pairAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenA(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddPylonCall__Outputs {
  _call: AddPylonCall;

  constructor(call: AddPylonCall) {
    this._call = call;
  }

  get pylonAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class AddPylonCustomPTCall extends EthereumCall {
  get inputs(): AddPylonCustomPTCall__Inputs {
    return new AddPylonCustomPTCall__Inputs(this);
  }

  get outputs(): AddPylonCustomPTCall__Outputs {
    return new AddPylonCustomPTCall__Outputs(this);
  }
}

export class AddPylonCustomPTCall__Inputs {
  _call: AddPylonCustomPTCall;

  constructor(call: AddPylonCustomPTCall) {
    this._call = call;
  }

  get _pairAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenA(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get floatPTAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get anchorPTAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class AddPylonCustomPTCall__Outputs {
  _call: AddPylonCustomPTCall;

  constructor(call: AddPylonCustomPTCall) {
    this._call = call;
  }

  get pylonAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ChangeEnergyAddressCall extends EthereumCall {
  get inputs(): ChangeEnergyAddressCall__Inputs {
    return new ChangeEnergyAddressCall__Inputs(this);
  }

  get outputs(): ChangeEnergyAddressCall__Outputs {
    return new ChangeEnergyAddressCall__Outputs(this);
  }
}

export class ChangeEnergyAddressCall__Inputs {
  _call: ChangeEnergyAddressCall;

  constructor(call: ChangeEnergyAddressCall) {
    this._call = call;
  }

  get _newEnergyRev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pylonAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pairAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenA(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ChangeEnergyAddressCall__Outputs {
  _call: ChangeEnergyAddressCall;

  constructor(call: ChangeEnergyAddressCall) {
    this._call = call;
  }

  get energy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ChangeEnergyFactoryAddressCall extends EthereumCall {
  get inputs(): ChangeEnergyFactoryAddressCall__Inputs {
    return new ChangeEnergyFactoryAddressCall__Inputs(this);
  }

  get outputs(): ChangeEnergyFactoryAddressCall__Outputs {
    return new ChangeEnergyFactoryAddressCall__Outputs(this);
  }
}

export class ChangeEnergyFactoryAddressCall__Inputs {
  _call: ChangeEnergyFactoryAddressCall;

  constructor(call: ChangeEnergyFactoryAddressCall) {
    this._call = call;
  }

  get _newEnergyFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeEnergyFactoryAddressCall__Outputs {
  _call: ChangeEnergyFactoryAddressCall;

  constructor(call: ChangeEnergyFactoryAddressCall) {
    this._call = call;
  }
}

export class MigrateLiquidityCall extends EthereumCall {
  get inputs(): MigrateLiquidityCall__Inputs {
    return new MigrateLiquidityCall__Inputs(this);
  }

  get outputs(): MigrateLiquidityCall__Outputs {
    return new MigrateLiquidityCall__Outputs(this);
  }
}

export class MigrateLiquidityCall__Inputs {
  _call: MigrateLiquidityCall;

  constructor(call: MigrateLiquidityCall) {
    this._call = call;
  }

  get _oldPylon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newPylon(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MigrateLiquidityCall__Outputs {
  _call: MigrateLiquidityCall;

  constructor(call: MigrateLiquidityCall) {
    this._call = call;
  }
}

export class SetFeeToSetterCall extends EthereumCall {
  get inputs(): SetFeeToSetterCall__Inputs {
    return new SetFeeToSetterCall__Inputs(this);
  }

  get outputs(): SetFeeToSetterCall__Outputs {
    return new SetFeeToSetterCall__Outputs(this);
  }
}

export class SetFeeToSetterCall__Inputs {
  _call: SetFeeToSetterCall;

  constructor(call: SetFeeToSetterCall) {
    this._call = call;
  }

  get _feeToSetter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToSetterCall__Outputs {
  _call: SetFeeToSetterCall;

  constructor(call: SetFeeToSetterCall) {
    this._call = call;
  }
}

export class SetFeesCall extends EthereumCall {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _maximumPercentageSync(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _deltaGammaThreshold(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _deltaGammaMinFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _muUpdatePeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _muChangeFactor(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _EMASamples(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class SetMigratorCall extends EthereumCall {
  get inputs(): SetMigratorCall__Inputs {
    return new SetMigratorCall__Inputs(this);
  }

  get outputs(): SetMigratorCall__Outputs {
    return new SetMigratorCall__Outputs(this);
  }
}

export class SetMigratorCall__Inputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }

  get _migrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMigratorCall__Outputs {
  _call: SetMigratorCall;

  constructor(call: SetMigratorCall) {
    this._call = call;
  }
}

export class SetPausedCall extends EthereumCall {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class StartPylonCall extends EthereumCall {
  get inputs(): StartPylonCall__Inputs {
    return new StartPylonCall__Inputs(this);
  }

  get outputs(): StartPylonCall__Outputs {
    return new StartPylonCall__Outputs(this);
  }
}

export class StartPylonCall__Inputs {
  _call: StartPylonCall;

  constructor(call: StartPylonCall) {
    this._call = call;
  }

  get _pylon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gamma(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _vab(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _anchorKFactor(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _formulaSwitch(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class StartPylonCall__Outputs {
  _call: StartPylonCall;

  constructor(call: StartPylonCall) {
    this._call = call;
  }
}
